#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 128

struct node {
  struct treino *treino;
  struct node *next;
};

struct treino {
  char nome[MAX];
  int num;
  struct exercicio *atividades;
};

struct exercicio {
  char nome[MAX];
  int serie, rep;
  struct exercicio *next;
};

int logar(char login[MAX], char senha[MAX]) {
  FILE *wl;
  char l[MAX], s[MAX], c[2], cpf[MAX];

  wl = fopen("whitelist.txt", "r");

  while (!feof(wl)) {

    fscanf(wl, "%s %s %s %s", l, s, cpf, c);

    if (strcmp(l, login) == 0 && strcmp(s, senha) == 0) {
      fclose(wl);
      return 1;
    }
  }
  fclose(wl);
  return 0;
}

int verificar_usuario(char login[MAX], char senha[MAX], char CPF[MAX]) {
  FILE *wl;
  char l[MAX], s[MAX], c[2], cpf[MAX];

  wl = fopen("whitelist.txt", "r");

  while (!feof(wl)) {
    fscanf(wl, "%s %s %s %s", l, s, cpf, c);

    if (strcmp(l, login) == 0 && strcmp(CPF, cpf) == 0) {
      fclose(wl);
      return 1;
    }
  }
  fclose(wl);
  return 0;
}

int cadastrar(char login[MAX], char senha[MAX], char CPF[MAX], char classe[2]) {

  if (verificar_usuario(login, senha, CPF) == 1) {
    printf("\nUsuário já existente.\n");
    return 0;
  } else {
    FILE *wl;
    wl = fopen("whitelist.txt", "a");
    fprintf(wl, "\n%s %s %s %s", login, senha, CPF, classe);
    fclose(wl);
    printf("\nUsuário cadastrado.\n");
    if (strcmp(classe, "a") == 0) {
      return 1;
    } else if (strcmp(classe, "t") == 0) {
      return 2;
    }
  }
}

struct exercicio *criar_exercicio(char nome_exercicio[MAX], int n_series, int n_reps) {

  struct exercicio *ex = NULL;
  struct exercicio *novo = (struct exercicio *)malloc(sizeof(struct exercicio));

  strcpy(novo->nome, nome_exercicio);
  novo->serie = n_series;
  novo->rep = n_reps;
  novo->next = NULL;
  ex = novo;
  return ex;
}

void adicionar_exercicio(struct exercicio *atividades, char nome_exercicio[MAX], int n_series, int n_reps) {

  struct exercicio *ex = atividades;

  while (ex->next != NULL) {
    ex = ex->next;
  }

  struct exercicio *novo = (struct exercicio *)malloc(sizeof(struct exercicio));

  strcpy(novo->nome, nome_exercicio);
  novo->serie = n_series;
  novo->rep = n_reps;
  ex->next = novo;
}

struct node *criar_treino() {

  char nome_exercicio[MAX];
  int opt, ex_count = 0, n_series, n_reps;

  struct node *novo_node = NULL;
  struct treino *novo_treino = NULL;

  novo_node = (struct node *)malloc(sizeof(struct node));

  novo_treino = (struct treino *)malloc(sizeof(struct treino));

  printf("\nDigite um nome para o novo treino: ");
  scanf("\n%[^\n]s", novo_treino->nome);

  do {
    printf("\nDigite um número maior ou igual a '0' para o novo treino: ");
    scanf("%d", &novo_treino->num);

  } while (novo_treino->num < 0);

  do {
    printf("\nDeseja adicionar exercício?\n[1] = sim\n[2] = não\n: ");
    scanf("%d", &opt);

    switch (opt) {
    case 1:

      printf("\nInsira o nome do exercicio: ");
      scanf("\n%[^\n]s", nome_exercicio);

      printf("\nInsira o número de séries: ");
      scanf("%d", &n_series);

      printf("\nInsira o número de repetições: ");
      scanf("%d", &n_reps);

      if (ex_count == 0) {
        novo_treino->atividades = criar_exercicio(nome_exercicio, n_series, n_reps);
      } else {
        adicionar_exercicio(novo_treino->atividades, nome_exercicio, n_series, n_reps);
      }
      ex_count += 1;
      break;
    }
  } while (opt != 2);

  novo_node->treino = novo_treino;
  novo_node->next = NULL;

  return novo_node;
}

void adicionar_treino(struct node *head) {

  struct node *n = head;
  while (n->next != NULL) {
    n = n->next;
  }

  char nome_exercicio[MAX];
  int opt, ex_count = 0, n_series, n_reps;

  struct node *novo_node = NULL;
  struct treino *novo_treino = NULL;

  novo_node = (struct node *)malloc(sizeof(struct node));

  novo_treino = (struct treino *)malloc(sizeof(struct treino));

  printf("\nDigite um nome para o novo treino: ");
  scanf("%s", novo_treino->nome);

  do {
    printf("\nDigite um número maior ou igual a '0' para o novo treino: ");
    scanf("%d", &novo_treino->num);

  } while (novo_treino->num < 0);

  do {
    printf("\nDeseja adicionar exercício?\n[1] = sim\n[2] = não\n: ");
    scanf("%d", &opt);

    switch (opt) {
    case 1:

      printf("\nInsira o nome do exercicio: ");
      scanf("%s", nome_exercicio);

      printf("\nInsira o número de séries: ");
      scanf("%d", &n_series);

      printf("\nInsira o número de repetições: ");
      scanf("%d", &n_reps);

      if (ex_count == 0) {
        novo_treino->atividades =
            criar_exercicio(nome_exercicio, n_series, n_reps);
      } else {
        adicionar_exercicio(novo_treino->atividades, nome_exercicio, n_series,
                            n_reps);
      }
      ex_count += 1;
      break;
    }
  } while (opt != 2);

  novo_node->treino = novo_treino;
  novo_node->next = NULL;

  n->next = novo_node;
}

void print_treino(struct node *head) {
  struct node *n = head;

  int num;

  if (n == NULL) {
    printf("\nVocê ainda não criou treinos!");
    printf("\n");

  } else {
    printf("\n|----------Treinos----------|\n");
    while (n != NULL) {
      printf("\n%d- %s", n->treino->num, n->treino->nome);
      n = n->next;
    }
    printf("\n");
    n = head;
    printf("\nDigite o número do treino que deseja visualizar: ");
    scanf("%d", &num);

    while (n->treino->num != num) {
      n = n->next;
      if (n == NULL) {
        printf("\nTreino não encontrado!");
        return;
      }
    }
    printf("\n|-------|Treino: %s|-------|\n", n->treino->nome);

    struct exercicio *ex = n->treino->atividades;
    if (ex == NULL) {
      printf("\nSem exercícios neste treino.");
    } else {
      while (ex != NULL) {
        printf("\n- %s [%d/%d]", ex->nome, ex->serie, ex->rep);
        ex = ex->next;
      }
    }
    printf("\n");
    return;
  }
}

void criar_dados(char userdata[MAX], char nome[MAX], float peso, int altura, char gen, int idade, float TMB) {

  FILE *data;
  data = fopen(userdata, "w");

  fprintf(data, "%s\n%.1f\n%d\n%c\n%d\n%.2f\n-1", nome, peso, altura, gen, idade, TMB);
  fclose(data);
}

const char *get_CPF(char login[MAX]) {
  FILE *wl;
  char l[MAX], s[MAX], cpf[MAX], c[MAX];

  wl = fopen("whitelist.txt", "r");

  while (!feof(wl)) {

    fscanf(wl, "%s %s %s %s", l, s, cpf, c);

    if (strcmp(l, login) == 0) {
      fclose(wl);
      return cpf;
    }
  }
  return "NULL";
}

const char *get_nome(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char nome[MAX];
  
  fscanf(data, "%[^\n]s", nome);
  fclose(data);
  return nome;
}

float get_peso(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char temp[MAX];
  float peso;
  
  fscanf(data, "%[^\n]s", temp);

  fscanf(data, "%f", &peso);
  fclose(data);
  return peso;
}

int get_altura(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char temp[MAX];
  int i, altura;

  fscanf(data, "%[^\n]s", temp);
  fscanf(data, "%s", temp);
  
  fscanf(data, "%d", &altura);
  fclose(data);
  return altura;
}

const char *get_gen(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char temp[MAX], genero[3];
  int i;
  
  fscanf(data, "%[^\n]s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);

  fscanf(data, "%s", genero);
  fclose(data);
  return genero;
}

int get_idade(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char temp[MAX];
  int i, idade;
  
  fscanf(data, "%[^\n]s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);

  fscanf(data, "%d", &idade);
  fclose(data);
  return idade;
}

float get_TMB(char login[MAX], char userdata[MAX]){
  FILE *data;
  data = fopen(userdata, "r");

  char temp[MAX];
  int i;
  float TMB;
  
  fscanf(data, "%[^\n]s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);

  fscanf(data, "%f", &TMB);
  fclose(data);
  return TMB;
}

struct exercicio *importar_criar_atividades(struct exercicio *atividades, char nome_exercicio[MAX], int n_series, int n_reps){
  struct exercicio *ex = atividades;

  while(ex != NULL){
    ex = ex->next;
  }

  struct exercicio *novo = (struct exercicio *)malloc(sizeof(struct exercicio));

  strcpy(novo->nome, nome_exercicio);
  novo->serie = n_series;
  novo->rep = n_reps;
  novo->next = NULL;

  ex = novo;
  return ex;
}

struct treino *importar_criar_treino(struct treino *treino, char nome_treino[MAX], int num_treino){
  struct treino *t = treino;

  struct treino *novo = (struct treino *)malloc(sizeof(struct treino));
  strcpy(novo->nome, nome_treino);
  novo->num = num_treino;
  novo->atividades = NULL;

  t = novo;
  return t;
}

/*
struct node *importar_treinos(char userdata[MAX]) {
  FILE *data;
  data = fopen(userdata, "r");
  
  char nome_treino[MAX], temp[MAX], num_treino[10], nome_exercicio[MAX];
  int traincount;

  struct node *novo_node = NULL;
  struct treino *novo_treino = NULL;

  novo_node = (struct node *)malloc(sizeof(struct node));
  
  fscanf(data, "%[^\n]s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);
  fscanf(data, "%s", temp);

  do{
    
    fscanf(data, "%s", num_treino);
    
    if(strcpy(num_treino, "-1") == 0){
      
      if(novo_node == NULL){
        return novo_node;
      }
      else{
        
      }
    }
  }while(strcpy(num_treino, "-1") != 0);
}
*/

int main(void) {

  struct node *head = NULL;
  
  int opc, altura, idade, traincount = 0, logged = 0;
  float peso, TMB;
  char nome[MAX], genero[3], gen, login[MAX], senha[MAX], c_senha[MAX], classe[2], CPF[MAX], userdata[MAX];

  do {
    printf("\n|-----------------MENU----------------|\n");
    printf("\n  1- Login");
    printf("\n  2- Cadastrar-se");
    printf("\n  3- Sair\n\n: ");
    scanf("%d", &opc);

    switch (opc) {

    case 1:
      //login
      printf("\nInsira seu login: ");
      scanf("%s", login);
      printf("\nInsira sua senha: ");
      scanf("%s", senha);

      if (logar(login, senha) == 1) {
        // caso login bem sucedido
        strcpy(classe, "a");
        logged = 1;
        printf("\nLogin efetuado com sucesso.\n");
      } else if (logar(login, senha) == 2) {
        strcpy(classe, "t");
        logged = 2;
        printf("\nLogin efetuado com sucesso.\n");
      } else {
        printf("\nLogin incorreto.\n");
      }
      break;

    case 2:
      // cadastrar
      printf("Insira seu login: ");
      scanf("%s", login);
      printf("\nInsira sua senha: ");
      scanf("%s", senha);
      printf("\nConfirme sua senha: ");
      scanf("%s", c_senha);
      printf("\nDigite seu CPF: ");
      scanf("%s", CPF);
      printf("\nVocê é um profissional da area de educação física / saúde e "
             "gostaria de\ncadastrar-se para monitorar treinos dos seus "
             "alunos?\n[S] = sim\n[N] = não\n\n: ");
      scanf("\n%[^\n]s", classe);

      if (strcmp(classe, "S") == 0) {
        strcpy(classe, "t");
      } else {
        strcpy(classe, "a");
      }

      if (strcmp(senha, c_senha) != 0) {
        printf("\nAs senhas inseridas são diferentes.\n");
        break;
      }

      else {
        if (cadastrar(login, senha, CPF, classe) == 1) {
          // caso cadastro bem sucedido

          strcpy(userdata, CPF);
          strcat(userdata, "Data.txt");

          printf("\nInsira seu nome: ");
          scanf("\n%[^\n]s", nome);
          printf("\nInsira seu peso em Kg: ");
          scanf("%f", &peso);
          printf("\nInsira sua altura em centímetros: ");
          scanf("%d", &altura);
          printf("\nInsira seu gênero de nascimento\n(M para masculino e F "
                 "para feminino): ");
          scanf("%s", genero);
          printf("\nInsira sua idade em anos: ");
          scanf("%d", &idade);
          gen = genero[0];
          if (gen == 'M') {
            TMB = (66 + (13.7 * peso) + (5 * altura) - (6.8 * idade));
          } else if (gen == 'F') {
            TMB = (655 + (9.6 * peso) + (1.8 * altura) - (4.7 * idade));
          }
          printf("\nSua taxa metabólica basal é: %.2f calorias por dia.\n",
                 TMB);

          criar_dados(userdata, nome, peso, altura, gen, idade, TMB);

          logged = 1;
        } else if (cadastrar(login, senha, CPF, classe) == 2) {

          printf("\nInsira seu nome: ");
          scanf("\n%[^\n]s", nome);
          printf("\nInsira seu peso em Kg: ");
          scanf("%f", &peso);
          printf("\nInsira sua altura em centímetros: ");
          scanf("%d", &altura);
          printf("\nInsira seu gênero de nascimento\n(M para masculino e F "
                 "para feminino): ");
          scanf("%s", genero);
          printf("\nInsira sua idade em anos: ");
          scanf("%d", &idade);
          gen = genero[0];
          if (gen == 'M') {
            TMB = (66 + (13.7 * peso) + (5 * altura) - (6.8 * idade));
          } else if (gen == 'F') {
            TMB = (655 + (9.6 * peso) + (1.8 * altura) - (4.7 * idade));
          }
          printf("\nSua taxa metabólica basal é: %.2f calorias por dia.\n",
                 TMB);

          // criar_dados(nome_arquivo, nome, peso, altura, gen, idade, TMB);

          logged = 2;
        }
        break;
      }

    case 3:
      printf("\nSaindo.");
      exit(0);
      break;
    }
  } while (logged == 0);

  strcpy(CPF, get_CPF(login));
  strcpy(userdata, CPF);
  strcat(userdata, "Data.txt");

  strcpy(nome, get_nome(login, userdata));
  peso = get_peso(login, userdata);
  altura = get_altura(login, userdata);
  strcpy(genero, get_gen(login, userdata));
  gen = genero[0];
  idade = get_idade(login, userdata);
  TMB = get_TMB(login, userdata);

  //head = importar_treinos(userdata);
  
  while (strcmp(classe, "a") == 0) {

    // enquanto login de aluno
    // menu

    printf("\n|-----------------MENU----------------|\n");
    printf("\n  1- Atualizar dados de usuário");
    printf("\n  2- Configurar treino pré-definido");
    printf("\n  3- Visualizar treino");
    printf("\n  4- Sair\n\n: ");
    scanf("%d", &opc);

    switch (opc) {

    case 1:
      // configurar o usuário

      printf("\nInsira seu nome: ");
      scanf("\n%[^\n]s", nome);
      printf("\nInsira seu peso em Kg: ");
      scanf("%f", &peso);
      printf("\nInsira sua altura em centímetros: ");
      scanf("%d", &altura);
      printf("\nInsira seu gênero de nascimento\n(M para masculino e F para "
             "feminino): ");
      scanf("%s", genero);
      printf("\nInsira sua idade em anos: ");
      scanf("%d", &idade);
      gen = genero[0];
      if (gen == 'M') {
        TMB = (66 + (13.7 * peso) + (5 * altura) - (6.8 * idade));
      } else if (gen == 'F') {
        TMB = (655 + (9.6 * peso) + (1.8 * altura) - (4.7 * idade));
      }
      printf("\nSua taxa metabólica basal é: %.2f calorias por dia.\n", TMB);
      break;

    case 2:
      // criar um treino pré-definido
      if (traincount == 0) {
        head = criar_treino();
        traincount += 1;
      } else {
        adicionar_treino(head);
        traincount += 1;
      }
      break;

    case 3:
      // visualizar os treinos
      print_treino(head);
      break;

    case 4:
      printf("\nSaindo.");
      exit(0);
      break;
    }
  }

  return 0;
}
